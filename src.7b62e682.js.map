{"version":3,"sources":["src/snake.ts","src/painter.ts","src/game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.7b62e682.js","sourceRoot":"..","sourcesContent":["import { Coord } from './game';\n\nexport enum DirectionTypes {\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n}\n\nexport default class Snake {\n  readonly size: number;\n  segments: Coord[];\n\n  direction: DirectionTypes;\n\n  get head() {\n    return this.segments[0];\n  }\n\n  constructor(size: number, segments: Coord[], direction: DirectionTypes) {\n    this.size = size;\n    this.segments = segments;\n    this.direction = direction;\n  }\n\n  turnUpward() {\n    if ([DirectionTypes.UP, DirectionTypes.DOWN].includes(this.direction)) return;\n    this.direction = DirectionTypes.UP;\n  }\n\n  turnDownward() {\n    if ([DirectionTypes.UP, DirectionTypes.DOWN].includes(this.direction)) return;\n    this.direction = DirectionTypes.DOWN;\n  }\n\n  turnLeft() {\n    if ([DirectionTypes.LEFT, DirectionTypes.RIGHT].includes(this.direction)) return;\n    this.direction = DirectionTypes.LEFT;\n  }\n\n  turnRight() {\n    if ([DirectionTypes.LEFT, DirectionTypes.RIGHT].includes(this.direction)) return;\n    this.direction = DirectionTypes.RIGHT;\n  }\n\n  update(appleCoord: Coord) {\n    const { head, direction, segments } = this;\n\n    let { x, y } = head;\n\n    switch (direction) {\n      case DirectionTypes.UP:\n        y -= 1;\n        break;\n      case DirectionTypes.DOWN:\n        y += 1;\n        break;\n      case DirectionTypes.LEFT:\n        x -= 1;\n        break;\n      case DirectionTypes.RIGHT:\n        x += 1;\n        break;\n    }\n\n    if (x < 0 || x >= this.size) return true;\n    if (y < 0 || y >= this.size) return true;\n\n    if (!(appleCoord.x === x && appleCoord.y === y)) {\n      this.segments.pop();\n    }\n\n    if (segments.some(coord => coord.x === x && coord.y === y)) return true;\n    this.segments.unshift({ x, y });\n\n    if (this.segments.length === this.size ** 2) return true;\n\n    return false;\n  }\n}","import { Coord } from './game';\nimport Snake, { DirectionTypes } from './snake';\n\nconst GRID_SIZE = 25;\n\nexport default class Painter {\n\n  size: number;\n  container: HTMLElement;\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n\n  constructor(container: HTMLElement, size: number) {\n    this.container = container;\n    this.size = size;\n    this.canvas = document.createElement('canvas');\n    this.context = this.canvas.getContext('2d')!;\n\n    this.canvas.style.width = this.size * GRID_SIZE + 'px';\n    this.canvas.style.height = this.size * GRID_SIZE + 'px';\n    this.canvas.width = this.size * GRID_SIZE;\n    this.canvas.height = this.size * GRID_SIZE;\n\n    this.container.appendChild(this.canvas);\n  }\n\n  drawGrid() {\n    for (let x = 0; x < this.size; x++) {\n      for (let y = 0; y < this.size; y++) {\n        const color = (x + y) % 2 === 0 ? 'rgb(171, 213, 90)' : 'rgb(163, 207, 83)';\n        this.context.fillStyle = color;\n        this.context.beginPath();\n        this.context.rect(x * GRID_SIZE, y * GRID_SIZE, GRID_SIZE, GRID_SIZE);\n        this.context.closePath();\n        this.context.fill();\n      }\n    }\n  }\n\n  drawApple(apple: Coord) {\n    const [x, y] = this._convertCoord(apple);\n    this.context.save();\n    this.context.shadowColor = 'rgba(50, 50, 50, .2)';\n    this.context.shadowBlur = 10;\n    this.context.beginPath();\n    this.context.arc(x, y, 8, 0, Math.PI * 2);\n    this.context.fillStyle = '#f5222d';\n    this.context.fill();\n    this.context.restore();\n  }\n\n  drawSnake(snake: Snake) {\n    const { segments, head, direction } = snake;\n\n    // draw body\n    const bodyPath = new Path2D();\n    segments.forEach((coord, index) => {\n      const [x, y] = this._convertCoord(coord);\n      if (index === 0) {\n        bodyPath.moveTo(x, y);\n      } else {\n        bodyPath.lineTo(x, y);\n      }\n    });\n\n    this.context.save();\n    this.context.shadowColor = 'rgba(50, 50, 50, .2)';\n    this.context.shadowBlur = 10;\n    this.context.lineCap = 'round';\n    this.context.lineJoin = 'round';\n    this.context.lineWidth = GRID_SIZE * 0.8;\n    this.context.strokeStyle = '#40a9ff';\n    this.context.stroke(bodyPath);\n    this.context.restore();\n\n    // draw eyes\n    const [x, y] = this._convertCoord(head);\n    const socketOffset = { x: 0, y: 0 };\n    const eyeOffset = { x: 0 ,y: 0 };\n    switch (direction) {\n      case DirectionTypes.UP:\n        socketOffset.x = 7;\n        eyeOffset.y = -2;\n        break;\n      case DirectionTypes.DOWN:\n        socketOffset.x = 7;\n        eyeOffset.y = 2;\n        break;\n      case DirectionTypes.LEFT:\n        socketOffset.y = 7;\n        eyeOffset.x = -2;\n        break;\n      case DirectionTypes.RIGHT:\n        socketOffset.y = 7;\n        eyeOffset.x = 2;\n        break;\n    }\n\n    this.context.save();\n    this.context.beginPath();\n    this.context.arc(x - socketOffset.x, y - socketOffset.y, 5, 0, Math.PI * 2);\n    this.context.closePath();\n    this.context.arc(x + socketOffset.x, y + socketOffset.y, 5, 0, Math.PI * 2);\n    this.context.closePath();\n    this.context.lineWidth = 4;\n    this.context.strokeStyle = '#40a9ff';\n    this.context.fillStyle = '#fff';\n    this.context.stroke();\n    this.context.fill();\n\n    this.context.beginPath();\n    this.context.arc(x - socketOffset.x + eyeOffset.x, y - socketOffset.y + eyeOffset.y, 3, 0, Math.PI * 2);\n    this.context.closePath();\n    this.context.arc(x + socketOffset.x + eyeOffset.x, y + socketOffset.y + eyeOffset.y, 3, 0, Math.PI * 2);\n    this.context.closePath();\n    this.context.fillStyle = '#000';\n    this.context.fill();\n    this.context.restore();\n\n  }\n\n  drawGameOver() {\n    this.context.font = 'bold 48px YaHei';\n    this.context.fillStyle = 'red';\n    const size = this.context.measureText('GAME OVER');\n    this.context.fillText(\n      'GAME OVER',\n      (this.canvas.width - size.width) / 2,\n      (this.canvas.height - 48) / 2,\n    );\n  }\n\n  private _convertCoord = (coord: Coord) => {\n    return [coord.x * GRID_SIZE + GRID_SIZE / 2, coord.y * GRID_SIZE + GRID_SIZE / 2];\n  }\n}","import Snake, { DirectionTypes } from './snake';\nimport Painter from './painter';\n\nconst GAME_GRID_SIZE = 21;\n\nexport interface Coord {\n  x: number;\n  y: number;\n}\n\nexport default class Game {\n\n  snake: Snake;\n  painter: Painter;\n  size: number;\n  private _timer: any;\n  private _apple: Coord = { x: 0, y: 0 };\n  private _start = false;\n\n  constructor(container: HTMLElement, size = GAME_GRID_SIZE) {\n    this.size = size;\n\n    const headCoord = { x: Math.floor(this.size / 2), y: Math.floor(this.size / 2) };\n    this.snake = new Snake(this.size, [\n      headCoord,\n      { x: headCoord.x, y: headCoord.y + 1 },\n      { x: headCoord.x, y: headCoord.y + 2 },\n    ], DirectionTypes.UP);\n\n    this.painter = new Painter(container, size);\n\n    window.addEventListener('keydown', this._handleKeydown, false);\n\n    this._placeApple();\n    this._update();\n  }\n\n  private _placeApple = () => {\n    const { segments } = this.snake;\n\n    const coords = new Array(this.size ** 2)\n      .fill(0)\n      .map((_, index) => {\n        return {\n          x: index % this.size,\n          y: Math.floor(index / this.size)\n        }\n      })\n      .filter(coord => segments.every(({ x, y }) => coord.x !== x && coord.y !== y));\n\n    if (coords.length === 0) return;\n    const index = Math.floor(coords.length * Math.random());\n    this._apple = coords[index];\n  }\n\n  private _update = () => {\n    const gameOver = this.snake.update(this._apple);\n\n    if (gameOver) {\n      clearInterval(this._timer);\n      this.painter.drawGameOver();\n      return;\n    }\n\n    if (this._apple.x === this.snake.head.x && this._apple.y === this.snake.head.y) {\n      this._placeApple();\n    }\n\n    this.painter.drawGrid();\n    this.painter.drawApple(this._apple);\n    this.painter.drawSnake(this.snake);\n  }\n\n  private _handleKeydown = (event: KeyboardEvent) => {\n    if (!this._start) {\n      this._timer = setInterval(this._update, 200);\n      this._start = true;\n    }\n\n    switch (event.key) {\n      case 'ArrowUp':\n        this.snake.turnUpward();\n        break;\n      case 'ArrowDown':\n        this.snake.turnDownward();\n        break;\n      case 'ArrowLeft':\n        this.snake.turnLeft();\n        break;\n      case 'ArrowRight':\n        this.snake.turnRight();\n        break;\n    }\n  }\n}","import Game from './game';\n\nconst container = document.getElementById('root');\n\nnew Game(container);\n"]}